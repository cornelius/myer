#!/usr/bin/env ruby

require 'gli'

require_relative '../lib/myer'

include GLI::App

program_desc 'Command line client for Project MySelf'

version Myer::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

desc "Admin actions"
command :admin do |c|
  c.desc "Register client"
  c.arg :server
  c.arg :pin
  c.command :register do |register|
    register.action do |g, o, args|
      if args.length < 2
        raise "You must specifcy server and pid"
      end
      AdminCliController.new.register(args[0], args[1])
    end
  end

  c.desc "Create bucket"
  c.command :create_bucket do |sc|
    sc.action do
      AdminCliController.new.create_bucket
    end
  end

  c.desc "List all existing buckets"
  c.command :list_buckets do |sc|
    sc.action do
      AdminCliController.new.list_buckets
    end
  end

  c.desc "Write item"
  c.command :write do |sc|
    sc.switch :raw, desc: "Write unencrypted"
    sc.action do |global_options, options, args|
      if options[:raw]
        AdminCliController.new.write_raw(STDIN.read)
      else
        AdminCliController.new.write(STDIN.read)
      end
    end
  end

  c.desc "Write value"
  c.arg :value
  c.command :write_value do |sc|
    sc.flag :tag, desc: "Add tag as meta data"
    sc.action do |global_options, options, args|
      AdminCliController.new.write_value(args[0], options[:tag])
    end
  end

  c.desc "Read items"
  c.command :read do |sc|
    sc.action do
      AdminCliController.new.read
    end
  end
end

desc "Track mouse clicks"
arg :mouse_id, :optional
command :track_clicks do |c|
  c.action do |global_options, options, args|
    CliController.new.track_clicks(args[0])
  end
end

exit run(ARGV)
